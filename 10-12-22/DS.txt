Data structure is a storage that is used to store and organize data. It is a way of arranging data on a computer so that it can be accessed and updated efficiently.

TYPES OF DATA STRUCTURE
Basically, data structures are divided into two categories:
linear,Non-linear data structure 
Linear data structure:elements are arranged in sequence one after the other. 
POPULAR LINEAR DATA STRUCTURES ARE:

1. ARRAY DATA STRUCTURE
In an array, elements in memory are arranged in continuous memory. All the elements of an array are of the same type. 




2. STACK DATA STRUCTURE
In stack data structure, elements are stored in the LIFO principle. That is, the last element stored in a stack will be removed first.
Basic Operations of Stack
Push: Add an element to the top of a stack
Pop: Remove an element from the top of a stack
IsEmpty: Check if the stack is empty
IsFull: Check if the stack is full
Peek: Get the value of the top element without removing it
Working of Stack Data Structure
The operations work as follows:

1)A pointer called TOP is used to keep track of the top element in the stack.
2)When initializing the stack, we set its value to -1 so that we can check if the stack is empty by comparing TOP == -1.
3)On pushing an element, we increase the value of TOP and place the new element in the position pointed to by TOP.
4)On popping an element, we return the element pointed to by TOP and reduce its value.
5)Before pushing, we check if the stack is already full
6)Before popping, we check if the stack is already empty







3. QUEUE DATA STRUCTURE
Unlike stack, the queue data structure works in the FIFO principle where first element stored in the queue will be removed first.

Basic Operations of Queue
1)A queue is an object (an abstract data structure - ADT) that allows the following operations:

2)Enqueue: Add an element to the end of the queue
3)Dequeue: Remove an element from the front of the queue
4)IsEmpty: Check if the queue is empty
5)IsFull: Check if the queue is full
6)Peek: Get the value of the front of the queue without removing it


Working of Queue
Queue operations work as follows:

two pointers FRONT and REAR
FRONT track the first element of the queue
REAR track the last element of the queue
initially, set value of FRONT and REAR to -1
Enqueue Operation
check if the queue is full
for the first element, set the value of FRONT to 0
increase the REAR index by 1
add the new element in the position pointed to by REAR

Dequeue Operation
check if the queue is empty
return the value pointed by FRONT
increase the FRONT index by 1
for the last element, reset the values of FRONT and REAR to -1






















